"===[ Personal Configuration Setup ]==="
set nocompatible    "This fixes the problem where arrow keys do not function properly on some systems.
set mouse=a         "Allows you to click around the text editor with your mouse to move the cursor
set showmatch       "Highlights matching brackets in programming languages
set autoindent      "If you're indented, new lines will also be indented
set smartindent     "Automatically indents lines after opening a bracket in programming languages
set backspace=2     "This makes the backspace key function like it does in other programs.
set tabstop=2       "How much space Vim gives to a tab
set number          "Enables line numbering
set smarttab        "Improves tabbing
set noexpandtab     "set Expand tab off"
set shiftwidth=2    "Assists code formatting
set foldmethod=manual  "Lets you hide sections of code


" --- ack
let g:ackprg = 'ag --nogroup --column'

" --- auto indent script
nnoremap ,f :set tabstop=2 softtabstop=2 shiftwidth=2 noexpandtab<CR>
" map ff  mzgg=G`z<CR>
noremap <silent> ff :Neoformat<CR>
vnoremap f =

" --- Vim controls
inoremap jk <Esc>l
nnoremap ;; :w<CR>
nnoremap ;w :w<CR>
nnoremap ;sp :split<CR>
nnoremap ;vsp :vsplit<CR>
nnoremap ;;q :bdelete<CR>
nnoremap `p :set paste<CR>
nnoremap `v :set nopaste<CR>
nnoremap `m :set mouse=a<CR>
nnoremap `n :set mouse-=a<CR>

" --- Buffer Commands
nnoremap <F5> :buffers<CR>:buffer<Space>
nnoremap bn :bn<CR>
nnoremap bp :bp<CR>

"--- Navigation commands
map i <Up>
map j <Left>
map k <Down>
noremap h i
"--- Ends navigation commands

" --- Tab Commands
nnoremap tn :tabnext<CR>
nnoremap tp :tabprevious<CR>
nnoremap `t :tabnew<CR>

" --- Vim controlls
inoremap jk <Esc>l
nnoremap ;; :w<CR>
nnoremap ;w :w<CR>
nnoremap ;sp :split<CR>
nnoremap ;vsp :vsplit<CR>
nnoremap ;;q :bdelete<CR>
nnoremap `p :set paste<CR>
nnoremap `v :set nopaste<CR>
nnoremap `m :set mouse=a<CR>
nnoremap `n :set mouse-=a<CR>

" --- Buffer Commands
nnoremap <F5> :buffers<CR>:buffer<Space>
nnoremap bn :bn<CR>
nnoremap bp :bp<CR>

"--- navigation commands
map i <Up>
map j <Left>
map k <Down>
noremap h i
if !has('nvim')
  set ttymouse=xterm2
endif

" --- If the .tags file exists, use it as a tags]
" if !empty(glob(".tags"))
" set tags=./.tags
" endif

"===[ Color Scheme Setup ]==="
set t_Co=256            "Sets it to 256 color mode
"colorscheme jellybeans  "Set ColorScheme to Jelly Beans
" set background=dark
set background=dark
colorscheme gruvbox
hi vertsplit ctermfg=238 ctermbg=235
hi LineNr ctermfg=237
hi StatusLine ctermfg=235 ctermbg=245
hi StatusLineNC ctermfg=235 ctermbg=237
hi Search ctermbg=58 ctermfg=15
hi Default ctermfg=1
hi clear SignColumn
hi SignColumn ctermbg=235
hi GitGutterAdd ctermbg=235 ctermfg=245
hi GitGutterChange ctermbg=235 ctermfg=245
hi GitGutterDelete ctermbg=235 ctermfg=245
hi GitGutterChangeDelete ctermbg=235 ctermfg=245
"let g:jellybeans_use_lowcolor_black = 0 "use Vim's grey instead of straight black background
"let g:Powerline_symbols = 'fancy'
set encoding=utf8
set termencoding=utf8
set fillchars=vert:\ ,stl:\ ,stlnc:\
set laststatus=2
set noshowmode
hi clear CursorLine
augroup CLClear
    autocmd! ColorScheme * hi clear CursorLine
augroup END
" hi CursorLineNR cterm=bold
augroup CLNRSet
    autocmd! ColorScheme * hi CursorLineNR cterm=bold ctermbg=NONE ctermfg=NONE
augroup END
set cursorline
"set guifont=Fira\ Mono\ for\ Powerline:h16
"set guifont=Fura\ Mono\ Regular\ Nerd\ Font\ Complete:h16
set guifont=FuraMonoNerdFontCM-Regular:h16
"set guifont=DroidSansMono\ Nerd\ Font:h11
"set guifont=Droid\ Sans\ Mono\ Nerd\ Font\ Complete\ Mono:h11
"set guioptions-=T guioptions-=e guioptions-=L guioptions-=r

"===[ Plugin Configuration ] ==="
"
" --- CTRL P
set runtimepath^=~/.vim/bundle/ctrlp.vim
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git'

" --- Tagbar
nmap <F7> :TagbarToggle<CR>

" --- NERDTree
nmap <F8> :NERDTreeToggle<CR>
" nmap <F8> :VimFilerExplorer<CR>
" nmap gf :VimFilerExplorer -find<CR>
nmap gf :NERDTreeFind<CR>
"let NERDTreeMapOpenInTab='\r'
let g:nerdtree_tabs_focus_on_files = 1
" let g:nerdtree_tabs_autofind = 1
let g:NERDTreeMapOpenInTab = '<2-LeftMouse>'
"let NERDTreeMapOpenInTab='<ENTER>'

" --- VimFilerExplorer
let g:vimfiler_tree_leaf_icon = ' '
let g:vimfiler_tree_opened_icon = '▾'
let g:vimfiler_tree_closed_icon = '▸'
let g:vimfiler_file_icon = ' '
let g:vimfiler_marked_file_icon = '*'

" --- Syntastic
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*

" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 1
" let g:syntastic_check_on_open = 1
" let g:syntastic_check_on_wq = 0
" let g:syntastic_javascript_checkers = ['eslint']
" let g:syntastic_javascript_eslint_exe = '$(npm bin)/eslint'

" --- ale
let g:ale_lint_on_save = 1
let g:ale_lint_on_text_changed = 0
let g:ale_linters = {'jsx': ['stylelint', 'eslint']}
let g:ale_linter_aliases = {'jsx': 'css'}
let g:ale_fixers = {
\  'javascript': ['eslint'],
\}
nmap <silent> <C-k> <Plug>(ale_previous)
nmap <silent> <C-j> <Plug>(ale_next)

" --- Airline
let g:airline_theme='powerlineish'
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'unique_tail_improved'

let g:airline_theme_patch_func = 'AirlineThemePatch'
function! AirlineThemePatch(palette)
  if g:airline_theme == 'powerlineish'
    let i = 0
    let a:palette.normal.airline_c = ['#ffffff', '#121212', 231, 235, '']
    let a:palette.insert.airline_c = ['#87d7ff', '#005f87', 117, 235, '']
    for colors in values(a:palette.normal)
      if i == 0
"        let colors[3] = 243
      endif
      let i += 1
    endfor
  endif
endfunction


" --- devicons
let g:webdevicons_enable = 1
let g:webdevicons_enable_nerdtree = 1
let g:WebDevIconsUnicodeGlyphDoubleWidth = 0
let g:webdevicons_conceal_nerdtree_brackets = 1
let g:WebDevIconsNerdTreeGitPluginForceVAlign = 1
let g:WebDevIconsUnicodeDecorateFolderNodes = 1
let g:DevIconsEnableFoldersOpenClose = 1

" --- identguide
let g:indentLine_color_term = 239


" --- vim emoji stuff
set completefunc=emoji#complete

" --- vim jsx
let g:jsx_ext_required = 0

" --- vim javascript
let g:javascript_plugin_jsdoc = 1

" --- vim-jsdoc
let g:jsdoc_enable_es6=1

" --- vim-conflicted

set stl+=%{ConflictedVersion()}

" --- gutentags
let g:gutentags_cache_dir="~/.gutentags_cache_dir"
set statusline+=%{gutentags#statusline('[Generating...]')}
let g:gutentags_debug=1
let g:gutentags_define_advanced_commands=1
let g:gutentags_ctags_auto_set_tags=1
let g:gutentags_ctags_exclude=[
      \ 'node_modules',
      \ ]

" --- tern for vim
let g:tern_show_argument_hints="on_move"

" --- deoplete
let g:deoplete#enable_at_startup = 1
let g:deoplete#omni#functions = {}
let g:deoplete#omni#functions.javascript = [
  \ 'tern#Complete',
  \ 'jspc#omni'
\]
let g:deoplete#omni#functions = {}
let g:deoplete#omni#functions.javascript = [
  \ 'tern#Complete',
  \ 'jspc#omni'
\]

set completeopt=longest,menuone,preview
let g:deoplete#sources = {}
let g:deoplete#sources['javascript.jsx'] = ['tag', 'file', 'buffer', 'ultisnips', 'ternjs']
let g:tern#command = ['tern']
let g:tern#arguments = ['--persistent']

let g:deoplete#sources#ternjs#types = 1
let g:deoplete#enable_smart_case=1

autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS

autocmd FileType javascript let g:SuperTabDefaultCompletionType = "<c-x><c-o>"
let g:UltiSnipsExpandTrigger="<C-j>"
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"

" close the preview window when you're not using it
let g:SuperTabClosePreviewOnPopupClose = 1
" or just disable the preview entirely
set completeopt-=preview

" --- screen
let g:ScreenImpl='Tmux'
let g:ScreenShellInitialFocus='shell'

" --- neoformat


" --- multiple cursors
func! Multiple_cursors_before()
    call deoplete#init#_disable()
endfunc
func! Multiple_cursors_after()
    call deoplete#init#_enable()
endfunc
